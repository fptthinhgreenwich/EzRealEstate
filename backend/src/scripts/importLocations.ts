import { PrismaClient } from '@prisma/client';
import axios from 'axios';

const prisma = new PrismaClient();

interface Province {
  code: number;
  name: string;
  codename: string;
  division_type: string;
  phone_code: number;
  districts: District[];
}

interface District {
  code: number;
  name: string;
  codename: string;
  division_type: string;
  short_codename: string;
  wards: Ward[];
}

interface Ward {
  code: number;
  name: string;
  codename: string;
  division_type: string;
  short_codename: string;
}

async function importLocations() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu t·ªânh th√†nh...');
    
    // L·∫•y danh s√°ch t·ªânh th√†nh v·ªõi ƒë·∫ßy ƒë·ªß qu·∫≠n/huy·ªán v√† x√£/ph∆∞·ªùng
    const response = await axios.get('https://provinces.open-api.vn/api/p/?depth=3');
    const provinces: Province[] = response.data;
    
    console.log(`üìç T√¨m th·∫•y ${provinces.length} t·ªânh/th√†nh ph·ªë`);
    
    let provinceCount = 0;
    let districtCount = 0;
    let wardCount = 0;
    
    // Import t·ª´ng t·ªânh th√†nh
    for (const province of provinces) {
      try {
        // Ki·ªÉm tra xem t·ªânh ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingProvince = await prisma.province.findUnique({
          where: { code: province.code.toString() }
        });
        
        let provinceRecord;
        
        if (existingProvince) {
          console.log(`‚úì T·ªânh ${province.name} ƒë√£ t·ªìn t·∫°i, b·ªè qua...`);
          provinceRecord = existingProvince;
        } else {
          // T·∫°o t·ªânh m·ªõi
          provinceRecord = await prisma.province.create({
            data: {
              name: province.name,
              code: province.code.toString()
            }
          });
          provinceCount++;
          console.log(`‚úÖ ƒê√£ th√™m t·ªânh: ${province.name}`);
        }
        
        // Import qu·∫≠n/huy·ªán
        if (province.districts) {
          for (const district of province.districts) {
            try {
              // Ki·ªÉm tra qu·∫≠n/huy·ªán ƒë√£ t·ªìn t·∫°i ch∆∞a
              const existingDistrict = await prisma.district.findFirst({
                where: {
                  code: district.code.toString(),
                  provinceId: provinceRecord.id
                }
              });
              
              let districtRecord;
              
              if (existingDistrict) {
                districtRecord = existingDistrict;
              } else {
                // T·∫°o qu·∫≠n/huy·ªán m·ªõi
                districtRecord = await prisma.district.create({
                  data: {
                    name: district.name,
                    code: district.code.toString(),
                    provinceId: provinceRecord.id
                  }
                });
                districtCount++;
              }
              
              // Import x√£/ph∆∞·ªùng
              if (district.wards) {
                for (const ward of district.wards) {
                  try {
                    // Ki·ªÉm tra x√£/ph∆∞·ªùng ƒë√£ t·ªìn t·∫°i ch∆∞a
                    const existingWard = await prisma.ward.findFirst({
                      where: {
                        code: ward.code.toString(),
                        districtId: districtRecord.id
                      }
                    });
                    
                    if (!existingWard) {
                      // T·∫°o x√£/ph∆∞·ªùng m·ªõi
                      await prisma.ward.create({
                        data: {
                          name: ward.name,
                          code: ward.code.toString(),
                          districtId: districtRecord.id
                        }
                      });
                      wardCount++;
                    }
                  } catch (error) {
                    console.error(`‚ùå L·ªói khi import x√£/ph∆∞·ªùng ${ward.name}:`, error);
                  }
                }
              }
            } catch (error) {
              console.error(`‚ùå L·ªói khi import qu·∫≠n/huy·ªán ${district.name}:`, error);
            }
          }
        }
      } catch (error) {
        console.error(`‚ùå L·ªói khi import t·ªânh ${province.name}:`, error);
      }
    }
    
    console.log('\nüìä K·∫øt qu·∫£ import:');
    console.log(`‚úÖ ƒê√£ th√™m ${provinceCount} t·ªânh/th√†nh ph·ªë`);
    console.log(`‚úÖ ƒê√£ th√™m ${districtCount} qu·∫≠n/huy·ªán`);
    console.log(`‚úÖ ƒê√£ th√™m ${wardCount} x√£/ph∆∞·ªùng`);
    console.log('üéâ Import d·ªØ li·ªáu th√†nh c√¥ng!');
    
  } catch (error) {
    console.error('‚ùå L·ªói khi import d·ªØ li·ªáu:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
importLocations().catch(console.error);