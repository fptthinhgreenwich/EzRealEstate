// Prisma schema file for SQL Server
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  phone     String?
  avatar    String?
  role      String   @default("BUYER")
  isVerified Boolean @default(false)
  totalSales Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  badges     Badge[]
  properties Property[]
  inquiries  Inquiry[]
  payments   Payment[]
  analytics  PropertyAnalytics[]
  
  @@map("users")
}

model Badge {
  id     String @id @default(cuid())
  userId String
  type   String
  title  String
  description String?
  earnedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("badges")
}

model Province {
  id   String @id @default(cuid())
  name String @unique
  code String @unique
  
  districts District[]
  properties Property[]
  
  @@map("provinces")
}

model District {
  id         String @id @default(cuid())
  name       String
  code       String
  provinceId String
  
  province Province @relation(fields: [provinceId], references: [id], onDelete: NoAction)
  wards    Ward[]
  properties Property[]
  
  @@unique([code, provinceId])
  @@map("districts")
}

model Ward {
  id         String @id @default(cuid())
  name       String
  code       String
  districtId String
  
  district   District @relation(fields: [districtId], references: [id], onDelete: NoAction)
  properties Property[]
  
  @@unique([code, districtId])
  @@map("wards")
}

model Property {
  id          String @id @default(cuid())
  title       String
  description String
  type        String
  status      String @default("AVAILABLE")
  
  provinceId String
  districtId String
  wardId     String
  street     String?
  address    String
  latitude   Float?
  longitude  Float?
  
  price       Decimal
  area        Float
  bedrooms    Int?
  bathrooms   Int?
  floors      Int?
  yearBuilt   Int?
  
  images      String
  virtualTour String?
  
  premiumStatus String @default("NONE")
  premiumUntil  DateTime?
  
  slug        String  @unique
  metaTitle   String?
  metaDescription String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sellerId String
  seller   User @relation(fields: [sellerId], references: [id], onDelete: NoAction)
  
  province Province @relation(fields: [provinceId], references: [id], onDelete: NoAction)
  district District @relation(fields: [districtId], references: [id], onDelete: NoAction)
  ward     Ward @relation(fields: [wardId], references: [id], onDelete: NoAction)
  
  inquiries Inquiry[]
  analytics PropertyAnalytics[]
  
  @@map("properties")
}

model Inquiry {
  id         String @id @default(cuid())
  propertyId String
  buyerId    String
  message    String
  phone      String?
  email      String?
  status     String @default("PENDING")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  buyer    User @relation(fields: [buyerId], references: [id], onDelete: NoAction)
  
  @@map("inquiries")
}

model PropertyAnalytics {
  id         String @id @default(cuid())
  propertyId String
  sellerId   String
  
  date       DateTime @db.Date
  views      Int @default(0)
  clicks     Int @default(0)
  inquiries  Int @default(0)
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  seller   User @relation(fields: [sellerId], references: [id], onDelete: NoAction)
  
  @@unique([propertyId, date])
  @@map("property_analytics")
}

model Payment {
  id             String @id @default(cuid())
  userId         String
  propertyId     String?
  amount         Decimal
  currency       String @default("VND")
  status         String @default("PENDING")
  paymentMethod  String
  transactionId  String? @unique
  
  premiumDuration Int?
  premiumStartDate DateTime?
  premiumEndDate   DateTime?
  
  metadata String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: NoAction)
  
  @@map("payments")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
}
