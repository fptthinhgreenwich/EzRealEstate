// Prisma schema file for SQL Server
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  phone     String?
  avatar    String?
  role      String   @default("BUYER")
  isVerified Boolean @default(false)
  totalSales Int @default(0)
  balance    Decimal  @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  badges     Badge[]
  properties Property[]
  inquiries  Inquiry[]
  payments   Payment[]
  analytics  PropertyAnalytics[]
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")
  sentMessages ChatMessage[]
  notifications Notification[]
  walletTransactions WalletTransaction[]
  
  @@map("users")
}

model Badge {
  id     String @id @default(cuid())
  userId String
  type   String
  title  String
  description String?
  earnedAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("badges")
}

model Province {
  id   String @id @default(cuid())
  name String @unique
  code String @unique
  
  districts District[]
  properties Property[]
  
  @@map("provinces")
}

model District {
  id         String @id @default(cuid())
  name       String
  code       String
  provinceId String
  
  province Province @relation(fields: [provinceId], references: [id], onDelete: NoAction)
  wards    Ward[]
  properties Property[]
  
  @@unique([code, provinceId])
  @@map("districts")
}

model Ward {
  id         String @id @default(cuid())
  name       String
  code       String
  districtId String
  
  district   District @relation(fields: [districtId], references: [id], onDelete: NoAction)
  properties Property[]
  
  @@unique([code, districtId])
  @@map("wards")
}

model Property {
  id          String @id @default(cuid())
  title       String
  description String
  type        String
  status      String @default("PENDING")
  
  provinceId String
  districtId String
  wardId     String
  street     String?
  address    String
  latitude   Float?
  longitude  Float?
  mapEmbedCode String? @db.Text
  
  price       Decimal
  area        Float
  bedrooms    Int?
  bathrooms   Int?
  floors      Int?
  yearBuilt   Int?
  
  images      String
  virtualTour String?
  
  premiumStatus String @default("NONE")
  premiumUntil  DateTime?
  
  slug        String  @unique
  metaTitle   String?
  metaDescription String?
  
  approvedAt DateTime?
  approvedBy String?
  rejectedAt DateTime?
  rejectedBy String?
  rejectionReason String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sellerId String
  seller   User @relation(fields: [sellerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  
  province Province @relation(fields: [provinceId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  district District @relation(fields: [districtId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  ward     Ward @relation(fields: [wardId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  
  inquiries Inquiry[]
  analytics PropertyAnalytics[]
  conversations Conversation[]
  
  @@map("properties")
}

model Inquiry {
  id         String @id @default(cuid())
  propertyId String
  buyerId    String
  message    String
  phone      String?
  email      String?
  status     String @default("PENDING")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  buyer    User @relation(fields: [buyerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  
  @@map("inquiries")
}

model PropertyAnalytics {
  id         String @id @default(cuid())
  propertyId String
  sellerId   String
  
  date       DateTime @db.Date
  views      Int @default(0)
  clicks     Int @default(0)
  inquiries  Int @default(0)
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  seller   User @relation(fields: [sellerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  
  @@unique([propertyId, date])
  @@map("property_analytics")
}

model Payment {
  id             String @id @default(cuid())
  userId         String
  propertyId     String?
  amount         Decimal
  currency       String @default("VND")
  status         String @default("PENDING")
  paymentMethod  String
  transactionId  String? @unique
  
  premiumDuration Int?
  premiumStartDate DateTime?
  premiumEndDate   DateTime?
  
  metadata String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  
  @@map("payments")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
}

model Conversation {
  id         String   @id @default(cuid())
  buyerId    String
  sellerId   String
  propertyId String?
  lastMessage String?
  lastMessageAt DateTime?
  unreadCountBuyer Int @default(0)
  unreadCountSeller Int @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  buyer    User     @relation("BuyerConversations", fields: [buyerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  seller   User     @relation("SellerConversations", fields: [sellerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  property Property? @relation(fields: [propertyId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  messages ChatMessage[]

  @@unique([buyerId, sellerId, propertyId])
  @@map("conversations")
}

model ChatMessage {
  id           String   @id @default(cuid())
  conversationId String
  senderId     String
  message      String   @db.Text
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  sender       User        @relation(fields: [senderId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@index([conversationId, createdAt])
  @@map("chat_messages")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  title      String
  message    String   @db.Text
  propertyId String?
  isRead     Boolean  @default(false)
  metadata   String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

model WalletTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Decimal
  type        String
  description String
  propertyId  String?
  referenceId String?
  status      String   @default("COMPLETED")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@index([userId, createdAt])
  @@map("wallet_transactions")
}
